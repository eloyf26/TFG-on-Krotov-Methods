[tox]
minversion = 3.7
envlist = py36-{test,runcmd}, py37-{test,runcmd}, py38-{test,runcmd}, py38qtm-{test,runcmd}, run-{cmd,blackcheck,black,isort,isortcheck}, docs, coverage

[testenv:.tox]
envdir = {toxworkdir}/.tox


[testenv]
basepython =
    # current "stable" python
    py38,run,docs,coverage,clean,bootstrap: python3.8
    # older pythons
    py38qtm: python3.8
    py37: python3.7
    py36: python3.6
envdir =
    # current "stable" environment
    py38,run,docs,coverage: {toxworkdir}/py38
    # other "stable" environment
    py38qtm: {toxworkdir}/py38qtm
    py37: {toxworkdir}/py37
    py36: {toxworkdir}/py36
deps =
    py36,py37,py38,py38qtm,run,docs,coverage: cython
    py38,py38qtm,run,docs,coverage: numpy==1.20.3
    py37: numpy==1.17.2
    py36: numpy==1.15.4
    py38,py38qtm,run,docs,coverage: scipy==1.6.3
    py37: scipy==1.3.1
    py36: scipy==1.2.0
    py38qtm: git+https://github.com/qutip/qutip.git@master
    py38,run,docs,coverage: qutip==4.6.1
    py37: qutip==4.5.0
    py36: qutip==4.3.1
install_command=python scripts/pip_sequential.py install {opts} -- {packages}
usedevelop = true
extras=
    dev
setenv =
    MATPLOTLIBRC = tests
passenv = HOME CI TRAVIS TRAVIS_* COVERALLS* CODECOV* SPELLCHECK SSH_AUTH_SOCK http_proxy https_proxy no_proxy
description =
    py{36,37,38}-test: Run tests in the corresponding environment
    py{36,37,38}-runcmd: Run arbitrary command following "--" in the corresponding environment
    py38qtm-test: Run tests with Python 3.8 and the QuTiP-master
    py38qtm-runcmd: Run arbitrary command following "--" in the environment for py38qtm-test
commands_pre =
    python -V
commands =
    py{36,37,38,38qtm}-runcmd: {posargs:python -c 'print("No command")'}
    py{36,37,38,38qtm}-test: py.test -vvv --doctest-modules --cov=krotov --nbval --sanitize-with docs/nbval_sanitize.cfg --ignore docs/_build/ --durations=10 -x -s {posargs:src tests docs README.rst}


[testenv:docs]
description = Generate the docs
changedir = {toxinidir}/docs
commands_pre =
    python -c 'import shutil; from pathlib import Path; shutil.rmtree(Path("notebooks")/ ".ipynb_checkpoints", ignore_errors=True)'
commands =
    sphinx-build . {posargs: _build/html --color -T -d _build/doctree}


[testenv:bootstrap]
description = Configure tox
envdir = {toxworkdir}/bootstrap
deps = tox
skip_install = True
commands_pre =
commands =
    python scripts/bootstrap.py


[testenv:clean]
description = Clean up
envdir = {toxworkdir}/clean_
deps =
skip_install = True
commands_pre =
whitelist_externals = tox
commands =
    python scripts/clean.py tests
    python scripts/clean.py build
    python scripts/clean.py docs
    tox -e clean-venv-unix
    tox -e clean-venv-win32


[testenv:clean-docs]
description = Clean up files resulting from generating the docs
envdir = {toxworkdir}/clean
deps =
skip_install = True
commands_pre =
commands =
    python scripts/clean.py docs


[testenv:clean-tests]
description = Clean up files resulting from testing/coverage
envdir = {toxworkdir}/clean
deps =
skip_install = True
commands_pre =
commands =
    python scripts/clean.py tests


[testenv:clean-build]
description = Clean up build artifacts (including __pycache__ folders)
envdir = {toxworkdir}/clean
deps =
skip_install = True
commands_pre =
commands =
    python scripts/clean.py build


[testenv:clean-venv-unix]
description = Remove tox virtual environments
envdir = {toxworkdir}/clean
deps =
skip_install = True
commands_pre =
platform = linux|bsd|darwin
whitelist_externals = rm
commands =
    rm -rf .tox


[testenv:clean-venv-win32]
description = Remove tox virtual environments
envdir = {toxworkdir}/clean
skip_install = True
commands_pre =
platform = win32
whitelist_externals = cmd
commands =
    cmd /C rmdir /S /Q .tox


[testenv:coverage]
description = Generate a coverage report
depends = py38-test
commands =
    coverage html
    python -c 'import pathlib; print("coverage report available in \{\}".format(pathlib.Path(".") / "htmlcov" / "index.html"))'


[testenv:run-cmd]
description = Run arbitrary command following "--" in the current stable environment, e.g. "tox -e run-cmd -- ipython"
commands = {posargs:python -c 'print("No command")'}


[testenv:run-black]
description = Run black formatter in the current stable environment
commands = python -m black --skip-string-normalization --line-length 79 {posargs:src tests}


[testenv:run-blackcheck]
description = Run black formatter check in the latext venv
commands = python -m black --skip-string-normalization --line-length 79 --check --diff {posargs:src tests}


[testenv:run-isort]
description = Run isort formatter in the current stable environment
commands = python -m isort --recursive {posargs:src tests}


[testenv:run-isortcheck]
description = Run isort formatter check in the current stable environment
commands = python -m isort --recursive --check-only --diff {posargs:src tests}


[testenv:run-flake8]
description = Run flake8 formatter check in the current stable environment
commands = python -m flake8 {posargs:src tests}


[testenv:run-pylint]
description = Run pylint formatter check in the current stable environment
commands = python -m pylint -j 0 {posargs:src}
